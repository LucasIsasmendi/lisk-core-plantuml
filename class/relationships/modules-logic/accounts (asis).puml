
class Accounts << modules >> {
  - blockReward: new BlockReward()
  - assetTypes[3]: new Vote()
  - __private: {}
  - shared: {}
  - self: this
  ..
  - library: scope
  ..
  - modules: scope
  --
  + Accounts(cb, scope)
  - openAccount(secret, cb)
  + generateAddressByPublicKey(publicKey)
  + getAccount(filter, fields, cb)
  + getAccounts(filter, fields, cb)
  + setAccountAndGet(data, cb)
  + mergeAccountAndGet(data, cb)
  + sandboxApi(call, args, cb)
  + onBind(scope)
  + isLoaded()
}

class Vote << logic >> {
  - self: this
  ..
  - library: scope.library
  ..
  - modules: scope.modules
  --
  + Vote ()
  + bind(scope)
  + create(data, trs)
  + calculateFee(trs, sender)
  + verify(trs, sender, cb)
  + verifyVote(vote, cb)
  + checkConfirmedDelegates(trs, cb)
  + checkUnconfirmedDelegates(trs, cb)
  + process(trs, sender, cb)
  + getBytes(trs)
  + apply(trs, block, sender, cb)
  + undo(trs, block, sender, cb)
  + applyUnconfirmed(trs, sender, cb)
  + undoUnconfirmed(trs, sender, cb)
  + objectNormalize(trs)
  + dbRead(raw)
  + dbSave(trs)
  + ready(trs, sender)
}

class Account << logic >> {
  - genesisBlock:
  scope.genesisblock.block
  - __private: {}
  - self: this
  ..
  - this.scope: scope
  - library: scope.library
  --
  + Account(cb, scope)
  + createTables(cb)
  + removeTables(cb)
  + objectNormalize(account)
  + verifyPublicKey(publicKey)
  + toDB(raw)
  + get(filter, fields, cb)
  + getAll(filter, fields, cb)
  + set(address, fields, cb)
  + merge(address, diff, cb)
  + remove(address, cb)
}

class Transaction << logic >> {
  - genesisblock: scope.genesisblock
  - __private: {}
  - self: this
  ..
  - this.scope: scope
  --
  + Transaction(scope, cb)
  + create(data)
  + attachAssetType(typeId, instance)
  + sign(keypair, trs)
  + multisign(keypair, trs)
  + getId(trs)
  + getHash(trs)
  + getBytes(trs, skipSignature, skipSecondSignature)
  + ready(trs, sender)
  + countById(trs, cb)
  + checkConfirmed(trs, cb)
  + checkBalance(amount, balance, trs, sender)
  + process(trs, sender, requester, cb)
  + verify(trs, sender, requester, cb)
  + verifySignature(trs, publicKey, signature)
  + verifySecondSignature(trs, publicKey, signature)
  + verifyBytes(bytes, publicKey, signature)
  + apply(trs, block, sender, cb)
  + undo(trs, block, sender, cb)
  + applyUnconfirmed(trs, sender, requester, cb)
  + undoUnconfirmed(trs, sender, cb)
  + dbSave(trs)
  + afterSave(trs, cb)
  + objectNormalize(trs)
  + dbRead(raw)
  + bindModules(scope)
}

class BlockReward << logic >> {
  - __private: {}
  --
  + BlockReward ()
  - parseHeight(height)
  + calcMilestone(height)
  + calcReward(height)
  + calcSupply(height)
}

Accounts ^-- Vote : new
Accounts ^-- BlockReward : new
Accounts ^.. Account: implements
Accounts ^.. Transaction: implements
