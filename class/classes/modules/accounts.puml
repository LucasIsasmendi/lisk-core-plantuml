@startuml
class Accounts < modules > {
  - blockReward: new BlockReward()
  - assetTypes[3]: new Vote(logger, schema)
  - __private: {}
  - shared: {}
  - self: this
  .. library ..
  - ed
  - schema
  - balancesSequence
  - logic.account
  - logic.transaction
  .. modules ..
  - delegates
  - accounts
  - transactions
  --
  + Accounts(cb, scope)
  + generateAddressByPublicKey(publicKey)
  + getAccount(filter, fields, cb)
  + getAccounts(filter, fields, cb)
  + setAccountAndGet(data, cb)
  + mergeAccountAndGet(data, cb)
  + sandboxApi(call, args, cb)
  + onBind(scope)
  + isLoaded()
  - openAccount(secret, cb)
  -- API --
  .. shared ..
  + open (secret, cb)
  + getBalance (address, cb)
  + getPublickey (address, cb)
  + generatePublicKey (secret, cb)
  + getDelegates (address, cb)
  + getDelegatesFee (req, cb)
  + addDelegates (secret, publicKey, multisigAccountPublicKey,
  secondSecret, delegates, cb)
  + getAccount (address, publicKey, cb)
  .. internal ..
  - count (req, cb)
  - top (query, cb)
  - getAllAccounts (req, cb)
}
@enduml
